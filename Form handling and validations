FORM HANDLING AND VALIDATION FULL ONE PROJECT USING REACT-HOOK-FORM(VERY IMP CONCEPT) PRESENT ATLAST --->NAME:USER REGISTRAION
BASIC FORM CREATION (HANDLING)--------------------------------------------------
function basicForm() {
  const [input, setInput] = useState({
    name: "",
    email: "",
    age: "",
    password: ""
  });
  const handleChange = (e) => {
    const {name, value} = e.target;
    setInput(prev => ({
      ...prev,
      [name]:value
    }));
  };
  const handleSubmit =(e)=>{
    e.preventDefault();
    if(!input.name || !input.email.includes("@")){
      alert ("please enter valid input");
    }
    console.log(input)
  };
  return(
    <form onSubmit={handleSubmit}>
      <input type="text" name= "name" placeholder="name" onChange={handleChange} value={input.name}/>
      <input type="text"
             name="email"
             value={input.email}
             onChange={handleChange}
             placeholder="email"
       />;
       <input type="text"
              name="age"
              value={input.age}
              onChange={handleChange}
              placeholder="age"
       />;
       <input type="text"
              name="password"
              value={input.password}
              onChange={handleChange}
              placeholder="password"
       />;
       <button onSubmit={handleSubmit}>Submit</button>

    </form>
  )
};
export default basicForm;

********************************************************************************************************************************************************************************

-------------bASIC && validating inputs in forms------------------------------
-------------using react-hookform-----------------------
import {useForm} from "react-hook-form";
function hookForm(){
  const{register, handleSubmit, formState:{errors}}= useForm();

  const onSubmit=(data)=>{
    console.log(data)
  };
  return(
    <form onSubmit={handleSubmit(onsubmit)}>
      <input 
      {...register("name",{required:"name is required"})} 
      placeholder="name"/>
      {errors.name && <p>errors.name.messages</p> };

      <input 
      {...register("email",{required:"email is required",
        pattern: {
          value:/^\S+@\S+$/i,
          message: "invalid email address"
        }
      })}
      placeholder="email" />
      {errors.email && <p>{errors.email.message}</p> };
      <button type="submit">submit</button>

    </form>
  )
};
export default hookForm;
********************************************************************************************************************
WHY PREFER REACT HOOK FORM MORE THAN USESTATE WHILE BUILDING FORMS
IN USESTATES-----------
1.Full control over logic
2.No extra dependencies
3.Good for learning how form handling works

❗ Downsides as forms grow:
Becomes boilerplate-heavy in usestate
Repetitive validation logic
Harder to manage complex forms (multi-step, dynamic fields, etc.)in usestates

🔁 That's why libraries like:
react-hook-form (declarative, performant)
Formik (with Yup for schema-based validation)
...are preferred for larger or production-level forms.

🔍 What is react-hook-form?
react-hook-form is a lightweight library that helps you manage form state and validation in React with less code and better performance compared to manually using useState.

✅ Why use react-hook-form instead of useState?

Feature	                      useState	                                           react-hook-form
Code amount	                More boilerplate	                                     Much less code
Performance	             Re-renders on every input change	                         Minimizes re-renders
Validation	             You write all validation manually	                       Built-in validation rules
Field registration	     Manual binding (onChange, value)	                         Automatic with register()
Handling large forms	   Tedious	                                                 Easy and scalable
Error handling	         Manual	                                                 Errors available in formState.errors
Built-in features	       ❌	                                               ✅ (form reset, validation, watch, etc.)
Dependency	             ❌None	                                                ✅ Need to install the package

🚀 What does react-hook-form make easier?
Field registration (register)
Handling form submission (handleSubmit)
Real-time validation feedback
Watching field values (watch)
Resetting and managing form state
*****************************************************************************
example: creating signup form using both usestate & react-hook-form.
USESTATE----->
import React, { useState } from "react";
export default function UseStateForm() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: ""
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    setErrors((prev) => ({ ...prev, [name]: "" }));
  };

  const validate = () => {
    const newErrors = {};
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!formData.name) newErrors.name = "Name is required";
    if (!formData.email) {
      newErrors.email = "Email is required";
    } else if (!emailRegex.test(formData.email)) {
      newErrors.email = "Invalid email address";
    }

    if (!formData.password) {
      newErrors.password = "Password is required";
    } else if (formData.password.length < 6) {
      newErrors.password = "Password must be at least 6 characters";
    }

    if (formData.confirmPassword !== formData.password) {
      newErrors.confirmPassword = "Passwords do not match";
    }

    return newErrors;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const validationErrors = validate();
    if (Object.keys(validationErrors).length === 0) {
      alert("Signup successful!");
      console.log(formData);
      setFormData({
        name: "",
        email: "",
        password: "",
        confirmPassword: ""
      });
    } else {
      setErrors(validationErrors);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Signup (useState)</h2>

      <input
        name="name"
        placeholder="Name"
        value={formData.name}
        onChange={handleChange}
      />
      {errors.name && <p>{errors.name}</p>}

      <input
        name="email"
        placeholder="Email"
        value={formData.email}
        onChange={handleChange}
      />
      {errors.email && <p>{errors.email}</p>}

      <input
        type="password"
        name="password"
        placeholder="Password"
        value={formData.password}
        onChange={handleChange}
      />
      {errors.password && <p>{errors.password}</p>}

      <input
        type="password"
        name="confirmPassword"
        placeholder="Confirm Password"
        value={formData.confirmPassword}
        onChange={handleChange}
      />
      {errors.confirmPassword && <p>{errors.confirmPassword}</p>}

      <button type="submit">Sign Up</button>
    </form>
  );
}


----------------------->>>>>>>>>>>>>>>>>>>>>
REACT-HOOK-FORM---->>>>>>>>>>>>>>>>>>>>
import React from "react";
import { useForm } from "react-hook-form";

export default function HookForm() {
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors }
  } = useForm();

  const password = watch("password");

  const onSubmit = (data) => {
    alert("Signup successful!");
    console.log(data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <h2>Signup (react-hook-form)</h2>

      <input
        placeholder="Name"
        {...register("name", { required: "Name is required" })}
      />
      {errors.name && <p>{errors.name.message}</p>}

      <input
        placeholder="Email"
        {...register("email", {
          required: "Email is required",
          pattern: {
            value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
            message: "Invalid email address"
          }
        })}
      />
      {errors.email && <p>{errors.email.message}</p>}

      <input
        type="password"
        placeholder="Password"
        {...register("password", {
          required: "Password is required",
          minLength: {
            value: 6,
            message: "Password must be at least 6 characters"
          }
        })}
      />
      {errors.password && <p>{errors.password.message}</p>}

      <input
        type="password"
        placeholder="Confirm Password"
        {...register("confirmPassword", {
          required: "Please confirm your password",
          validate: (value) =>
            value === password || "Passwords do not match"
        })}
      />
      {errors.confirmPassword && <p>{errors.confirmPassword.message}</p>}

      <button type="submit">Sign Up</button>
    </form>
  );
***************************************************************************************
1. const { name, value } = e.target;
This extracts the name and value from the input element the user is typing in.

Example: If the input is:
<input name="email" value="hello@gmail.com" />
Then:

name = "email"
value = "hello@gmail.com"
2. setFormData((prev) => ({ ...prev, [name]: value }))
This updates your form state dynamically based on which input changed.

It spreads the previous state and updates only the changed field using [name].

Equivalent to:
setFormData({
  name: prev.name,
  email: prev.email,
  password: prev.password,
  [name]: value // updates just the field being typed into
});
3. setErrors((prev) => ({ ...prev, [name]: "" }));
Clears the error message for the current input field (if any) as the user starts typing.

So if the email was previously invalid, it clears the error once the user starts fixing it.

✅ Why this pattern is useful
Works for all inputs in one function

Keeps form state and error state in sync

Makes your form easy to scale (more fields = no new code)
Now, name acts like a key, and you don't need multiple onChange functions.
✨ Why it's special:
✅ Makes form logic DRY (Don't Repeat Yourself)

✅ Works well with objects like formData

✅ Scales easily for long forms

✅ Required for integration with libraries like react-hook-form

⚠️ If you don’t use name, you can't dynamically tell which field was changed.
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
--------------USER REGISTRATION FORM---------------------------- FORM HANDLING AND VALIDATION FULL ONE PROJECT USING REACT-HOOK-FORM(VERY IMP CONCEPT)---------------
import {useForm} from 'react-hook-form';
function RegistrationForm(){
  const {register,
        handleSubmit, 
        watch,
        formState:{errors}} = useForm();
  
  const onSubmit = (data)=>{
    console.log(data);
    alert("signupsucssfully");
  }
  const password = watch("password");
  return(
    <form onSubmit={handleSubmit(onSubmit)}>
      <input {...register("name",{required:"name is mandatory"})}
      placeholder="name" />
      {errors.name && <p>{errors.name.message}</p>}

      <input {...register("email",{required: "email is mandatory", 
        pattern:{
          value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
          message:"invalid email"
        }
      })}
      placeholder="email" />
      {errors.email && <p>{errors.email.message}</p> }

      <input {...register("password",{required:"password is required",
        minLength:{
          length:6,
          message:"password length should be min 6 characters"
        },
      })}
      placeholder="passowrd"/>
      {errors.password &&<p>{errors.password.message}</p> }

       <input {...register("confirmpassword",{required:"confirmpassword",
        validate: (value) => value === password || "password mismatch"
       })}
       placeholder="confirmpassword" />
       {errors.confirmpassword && <p>{errors.confirmpassword.message}</p>}

       <div>
        Gender
        <label>
          <input type="radio" value= "Male"
          {...register("gender",{required:"Gender is mandatory"})}
           />{" "}
           Male
        </label>
        <label>
          <input type="radio" value= "Female"
          {...register("gender",{required:"Gender is mandatory"})}
           />{" "}
           Female
        </label>
        <label>
          <input type="radio" value= "other"
          {...register("gender",{required:"Gender is mandatory"})}
           />{" "}
           Other
        </label>
        {errors.gender && <p>{errors.gender.message}</p>}
       </div>


       <div>
        interests
        <label>
          <input type="checkbox" value = "Reading"
          {...register("interests",{required:"select atleast one option"})} />
          Reading
        </label>
        <label>
          <input type = "checkbox" value = "Travelling" 
          {...register("interests",{required:"select atleast one option"})}/>
          Travelling
        </label>
         <label>
          <input type="checkbox" value = "Eating"
          {...register("interests",{required:"select atleast one option"})} />
           Eating
        </label>
        {errors.interests &&<p>{errors.interests.message}</p>}
      </div>
      <select {...register("country", { required: "Country is mandatory" })}>
        <option value="">Select Country</option>
        <option value="India">India</option>
        <option value="USA">USA</option>
        <option value="Germany">Germany</option>
      </select>
      {errors.country && <p>{errors.country.message}</p>}

      <button type="submit">submit</button>   
    </form>
  )
};
export default RegistrationForm;





